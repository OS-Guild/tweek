swagger: "2.0"
consumes:
  - application/json
produces:
  - application/json
schemes:
  - http
  - https
info:
  title: Tweek
  license:
    name: MIT
    url: https://github.com/Soluto/tweek/blob/master/LICENSE
  version: 0.1.0
basePath: /api/v2/
paths:
  /values:
    get:
      tags:
        - "configuraiton"
      responses:
        200:
          description: "Success"
        400:
          description: "Invalid Request"
        403:
          description: "Unauthorized"
        404:
          description: "Key not found"
      parameters: 
        - name: keyName
          in: query
          description: "Configuration key name"
          type: string
          required: true
        - name: $include
          in: query
          description: "Include additional keys"
          type: array
          items:
            type: string
          collectionFormat: multi
        - name: $flatten
          in: query
          description: "Return flat key/value JSON (no nesting)"
          type: boolean
  /models:
    get:
      tags:
        - models
      operationId: readModels
      parameters: 
        - name: body
          in: body
          description: description
          schema:
            $ref: '#/definitions/PermissionsModel'
      responses:
        '200':
          description: Result
    post:
      tags:
        - models
      operationId: writeModels
      responses:
        '200':
          description: Success
  /tags:
    get:
      description: "Get all tags"
      operationId: TagsGet
      produces:
        - application/json
      responses:
        '200':
          description: Ok
          schema:
            type: array
            items:
              type: string
      tags:
        - tags
      parameters: []
    put:
      description: "Save tags"
      operationId: TagsSave
      produces:
        - text/html
      responses:
        '204':
          description: 'No content'
      tags:
        - tags
      consumes:
        - application/json
      parameters:
        - description: "The tags that need saving"
          in: body
          name: tagsToSave
          required: true
          schema:
            type: object
  /context/{identityType}/{identityId}:
    get:
      operationId: GetContext
      parameters:
        - name: identityType
          in: path
          description: the type of the identity - for example user
          type: string
          required: true
        - name: identityId
          in: path
          description: the identifier of the identity - for example jaime
          type: string
          required: true
      responses:
        '200':
          description: Ok
      produces:
        - application/json
    post:
      parameters:
        - name: identityType
          in: path
          description: the type of the identity - for example user
          type: string
          required: true
        - name: identityId
          in: path
          description: the identifier of the identity - for example jaime
          type: string
          required: true
      responses:
        '200':
          description: Ok
  /context/{identityType}/{identityId}/{prop}:
    delete:
      parameters: 
        - name: identityType
          in: path
          description: the type of the identity - for example user
          type: string
          required: true
        - name: identityId
          in: path
          description: the identifier of the identity - for example jaime
          type: string
          required: true
        - name: prop
          in: path
          description: the property to delete, for example age
          type: string
          required: true
      responses:
        200:
          description: OK
  /schemas:
    get:
      operationId: GetSchemas
      produces:
        - application/json
      responses:
        '200':
          description: Ok
          schema:
            type: array
            items:
              type: object
      description: ""
      tags:
        - schema
      parameters: []
  /schemas/{identityType}:
    delete:
      operationId: DeleteIdentity
      produces:
        - text/html
      responses:
        '200':
          description: Ok
          schema:
            type: string
      tags:
        - schema
      parameters:
        - description: "The type of the identity"
          in: path
          name: identityType
          required: true
          type: string
        # - description: ""
        #   in: query
        #   name: author.name
        #   required: true
        #   type: string
        # - description: ""
        #   in: query
        #   name: author.email
        #   required: true
        #   type: string
    post:
      operationId: SchemaAddIdentity
      produces:
        - text/html
      responses:
        '200':
          description: Ok
          schema:
            type: string
      description: ""
      tags:
        - schema
      consumes:
        - application/json
      parameters:
        - description: ""
          in: path
          name: identityType
          required: true
          type: string
        # - description: ""
        #   in: query
        #   name: author.name
        #   required: true
        #   type: string
        # - description: ""
        #   in: query
        #   name: author.email
        #   required: true
        #   type: string
        - description: ""
          in: body
          name: value
          required: true
          schema:
            type: object
    patch:
      operationId: SchemaPatchIdentity
      produces:
        - text/html
      responses:
        '200':
          description: Ok
          schema:
            type: string
      tags:
        - schema
      consumes:
        - application/json
      parameters:
        - description: ""
          in: path
          name: identityType
          required: true
          type: string
        # - description: ""
        #   in: query
        #   name: author.name
        #   required: true
        #   type: string
        # - description: ""
        #   in: query
        #   name: author.email
        #   required: true
        #   type: string
        - description: ""
          in: body
          name: patch
          required: true
          schema:
            type: object
definitions:
  PermissionsModelItem:
    type: object
    additionalProperties: false
    properties:
      PType: { type: string }
      V0: { type: string }
      V1: { type: string }
      V2: { type: string }
      V3: { type: string }
      V4: { type: string }
      V5: { type: string }
  PermissionsModel:
    type: array
    items:
      $ref: '#/definitions/PermissionsModelItem'
    example:
    - PType: p
      V0: allow@security.test
      V1: /target
      V2: GET
      V3: allow
      V4: ''
      V5: ''
    - PType: p
      V0: deny@security.test
      V1: /target
      V2: GET
      V3: deny
      V4: ''
      V5: ''

  # /schemas
  # /context
  # /configuration
